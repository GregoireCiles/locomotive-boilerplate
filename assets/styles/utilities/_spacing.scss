// ==========================================================================
// Utilities / Spacing
// ==========================================================================

////
/// Utility classes to put specific spacing values onto elements. The below loop
/// will generate us a suite of classes like:
///
/// @example
///   .u-margin-top {}
///   .u-padding-left-large {}
///   .u-margin-right-small {}
///   .u-padding {}
///   .u-padding-right-none {}
///   .u-padding-horizontal {}
///   .u-padding-vertical-small {}
///
/// @link https://github.com/inuitcss/inuitcss/blob/512977a/utilities/_utilities.spacing.scss
////

/* stylelint-disable string-quotes */

$spacing-directions: (
    null:          null,
    '-top':        '-top',
    '-right':      '-right',
    '-bottom':     '-bottom',
    '-left':       '-left',
    '-x':          '-left' '-right',
    '-y':          '-top'  '-bottom',
) !default;

$spacing-properties: (
    'padding': 'padding',
    'margin':  'margin',
) !default;

$spacing-sizes: join($spacers, (
    null:       var(--grid-gutter),
    'none':    0
));

@each $breakpoint, $mediaquery in $breakpoints {
    @each $property-namespace, $property in $spacing-properties {
        @each $direction-namespace, $direction-rules in $spacing-directions {
            @each $size-namespace, $size in $spacing-sizes {

                // Spacer without media query
                @if $breakpoint == "tiny" {
                    .u-#{$property-namespace}#{$direction-namespace}-#{$size-namespace} {
                        @each $direction in $direction-rules {
                            #{$property}#{$direction}: $size !important;
                        }
                    }
                }

                // Spacer min-width breakpoints `@from-*`
                .u-#{$property-namespace}#{$direction-namespace}-#{$size-namespace}\@from-#{$breakpoint} {
                    @media #{mq-min($breakpoint)} {
                        @each $direction in $direction-rules {
                            #{$property}#{$direction}: $size !important;
                        }
                    }
                }

                // Spacer max-width breakpoints @to-*`
                .u-#{$property-namespace}#{$direction-namespace}-#{$size-namespace}\@to-#{$breakpoint} {
                    @media #{mq-max($breakpoint)} {
                        @each $direction in $direction-rules {
                            #{$property}#{$direction}: $size !important;
                        }
                    }
                }
            }
        }
    }
}

/* stylelint-enable string-quotes */
